syntax="proto3";


//  In order to generate the code from the proto we need to install the protocol buffers compiler (protoc).
//  For this example we will generated the code for Golang and Java.
//
//  For golang we need to install some plugins for the protocol buffer compiler
//  go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28
//  go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2 
//
//  Run the following command to generate the code for Java
//    protoc --proto_path=PROTO_PATH --java_out=JAVA_OUT name of proto files
//  PROTO_PATH refers to a directory where all the proto files are located. If not provided the default is the current directory.
//  JAVA_OUT refers the output directory where the generated code will be placed.
//
//  Java:
//  protoc --proto_path=./proto \
//       --java_out=./generated/java \
//       ./proto/**/*.proto
//
//  Go:
//  protoc --proto_path proto --go_out "generated/go/" proto/**/*.proto

// Both generated code will only create the data structures from address.proto, person.proto, project.proto and generaring_proto.proto files.
// However the previous command didn't generate the code for implementing the RPC system which is SearchService with its methods.
// To do this we need to provide another argument to the protoc compiler which it comes from the plugin we installed (this case for Go).
// Go:
// protoc --proto_path proto --go_out "generated/go/" --go-grpc_out "generated/go/" proto/**/*.proto
// The previous commands creates a subfolder inside of generated/go folder like:
/*
 generated
│   ├── go
│   │   └── github.com
│   │       └── orlandorode97
│   │           └── protobuffers
│   │               └── generated
│   │                   └── go
│   │                       └── example
│   │                           ├── address
│   │                           │   └── address.pb.go
│   │                           ├── generating_proto.pb.go
│   │                           ├── generating_proto_grpc.pb.go
│   │                           ├── person
│   │                           │   └── person.pb.go
│   │                           └── project
│   │                               └── project.pb.go

 Which is not correct, it creates absolute folders.
 We need to specify that the protoc needs to create those files with a relative path with the flag --go_opt=paths=source_relative and
 same for --go-grpc_opt=paths=source_relative

*/
// Go:
// protoc --proto_path proto --go_out "generated/go/example" --go-grpc_out "generated/go/example" --go_opt=paths=source_relative --go-grpc_opt=paths=source_relative proto/**/*.proto
// Now it looks better
/*
generated
├── go
│   └── example
│       ├── address
│       │   └── address.pb.go
│       ├── generating_proto.pb.go
│       ├── generating_proto_grpc.pb.go
│       ├── person
│       │   └── person.pb.go
│       └── project
│           └── project.pb.go
*/

